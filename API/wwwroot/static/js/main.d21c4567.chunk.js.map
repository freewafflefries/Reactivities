{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/errors/TestError.tsx","features/profiles/ProfileEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","bio","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","loadActivities","setLoadingInitial","axiosParams","result","forEach","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","value","resetPredicate","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","loadingActivities","userActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setBio","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","newDisplayName","newBio","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Debug","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","localeDate","utcDate","localOffset","getTimezoneOffset","localTime","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","setPredicate","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","extra","Icon","styles","borderColor","boarderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBotton","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MeTextInput","props","useField","field","meta","Form","Field","touched","label","Input","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","marginBottom","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","Divider","LoadingCompoenent","Dimmer","MyTextArea","MeSelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","contect","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","Actions","Action","activityImageStyle","activityImageTextStyle","bottom","left","height","zIndex","top","ribbon","padding","verticalAlign","relaxed","divided","Extra","NotFound","Inline","primary","message","Modal","onClose","TestErrors","widths","baseUrl","setEditMode","isCurrentUser","Tab","Pane","ProfileEdit","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","LoginForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.d21c4567.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    titalItems: number;\n    totalPages: number\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber: number = 1;\n    pageSize: number;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile,  UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL //'http://localhost:5000/api';\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = ` Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n\n        if (process.env.NODE_ENV ==='development') await sleep(1000);\n        \n        const pagination = response.headers['pagination'];\n        if(pagination) {\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination))\n            return response as AxiosResponse<PaginatedResult<any>>;\n        }\n        return response;\n    \n},(error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error('not found');\n            }\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } \n            toast.error('bad request');\n            break;\n        case 401:\n            toast.error('unauthorized');\n            break;\n        case 404:\n            history.push('/not-found');\n            toast.error('not found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody)\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {})\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData()\n        formData.append('File', file)\n        return axios.post<Photo>('photos', formData, {\n            headers: {'content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles/${profile.username}`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","\nimport { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUserName: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n}\n\nexport class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n        Object.assign(this, init)\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n        if(activity) {\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.city = activity.city;\n            this.venue = activity.venue\n        }\n    }\n    \n}","\n\nimport { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n        this.bio = user.bio;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}\n\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\"\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\"\nimport {format} from 'date-fns'\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\n\n\nexport default class ActivityStore {\n    \n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor(){\n        makeAutoObservable(this)\n\n        reaction(\n            () => this.predicate.keys(), \n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams =(pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    \n    setPredicate(predicate: string , value: string | Date | boolean) {\n\n        const resetPredicate = () => {\n        \n            \n            this.predicate.forEach((value, key) => {\n                if(key !== 'startDate') {\n                    this.predicate.delete(key)\n                }\n            });\n        }\n\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true)\n                break;\n            case 'isGoing':\n                resetPredicate()\n                this.predicate.set('isGoing', true)\n                break;\n            case 'isHost':\n                resetPredicate()\n                this.predicate.set('isHost', true)\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate')\n                this.predicate.set('startDate', value)\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams()\n        params.append('pageNumber', this.pagingParams.pageNumber.toString())\n        params.append('pageSize', this.pagingParams.pageSize.toString())\n        this.predicate.forEach((value, key) => {\n            if(key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value)\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime())\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n    \n\n    loadActivities = async () => {\n        this.setLoadingInitial(true);\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => { \n                this.setActivity(activity);\n                //this.activities.push(activity);\n            })\n            this.setPagination(result.pagination)\n              this.setLoadingInitial(false);;\n        } catch (error) {\n            console.log(error);\n            \n            this.setLoadingInitial(false);; \n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity)\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity\n            } catch (error) {\n                console.log(error)\n                this.setLoadingInitial(false)\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUserName === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUserName)\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    \n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!)\n        //activity.id = uuid();\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity)\n            newActivity.hostUserName = user!.username\n            newActivity.attendees = [attendee]\n            this.setActivity(newActivity)\n            runInAction(() => {\n                //this.activities.push(activity);\n                \n                this.selectedActivity = newActivity;\n                \n                \n            })\n        } catch (error) {\n            console.log(error);\n            \n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        \n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if(activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);   \n        }\n\n    }\n\n    deleteActivity = async (id:string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                //this.activities = [...this.activities.filter(a => a.id !== id)];\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n\n        } catch (error) {\n            console.log(error);\n            this.loading = false;\n        }\n        \n\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username)\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!)\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error)\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle =  async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error)\n        } finally {\n            runInAction(() => this.loading = false)\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount -- : attendee.followersCount ++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab: any = 0;\n    loadingActivities = false;\n    userActivities: UserActivity[] = [];\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if(activeTab === 3 || activeTab === 4)\n                {\n                    const predicate = activeTab === 3 ? 'followers' : 'following'\n                    this.loadFollowings(predicate)\n                } else {\n                    this.followings = []\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if(store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async(username:string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loadingProfile = false)\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file)\n            const photo = response.data\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo)\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.uploading = false)\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true\n        try {\n            await agent.Profiles.setMainPhoto(photo.id)\n            store.userStore.setImage(photo.url)\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => this.loading = false)\n            console.log(error)\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id)\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id)\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => this.loading = false)\n            console.log(error)\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            agent.Profiles.updateProfile(profile)\n            runInAction(() => {\n                if(profile.bio && profile.bio !== store.userStore.user?.bio) {\n                    store.userStore.setBio(profile.bio)\n                }\n                if(profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName)   \n                }\n                this.profile = {...this.profile, ...profile as Profile}\n                    this.loading = false\n            })\n\n        } catch(error) {\n            runInAction(() => this.loading = false)\n            console.log(error)\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username)\n            runInAction(() => {\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if(profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loading = false)\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(() => this.loadingFollowings = false)\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        if (predicate === null || undefined)\n        {\n            predicate = 'future'\n        }\n        try {\n            const userActivities = await agent.Profiles.listActivities(username, predicate!)\n            \n            runInAction(() => {\n                this.userActivities = userActivities;\n                this.loadingActivities = false;\n            })\n        } catch(error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n    fbAccessToken: string | null = null;\n    fbLoading = false;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try{\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities')\n            store.modalStore.closeModal();\n            \n            console.log(user)\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try{\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities')\n            store.modalStore.closeModal();\n            \n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) {\n            this.user.image = image\n        }\n    }\n\n    setDisplayName = (newDisplayName: string) => {\n        if (this.user) {\n            this.user.displayName = newDisplayName\n        }\n    }\n\n    setBio = (newBio: string) => {\n        if (this.user) {\n            this.user.bio = newBio;\n        }\n    }\n\n    getFacebookLoginStatus = async () => {\n        window.FB.getLoginStatus(response => {\n            if(response.status === 'connected') {\n                    this.fbAccessToken = response.authResponse.accessToken;\n                }\n            })\n    }\n\n    facebookLogin = () => {\n        this.fbLoading = true\n\n        const apiLogin = (accessToken: string) => {\n            agent.Account.fbLogin(accessToken).then(user => {\n                store.commonStore.setToken(user.token)\n                runInAction(() => {\n                    this.user = user\n                    this.fbLoading = false\n                })\n                history.push(\"/activities\")\n            }).catch(error => {\n                console.log(error)\n                runInAction(() => this.fbLoading = false)\n            })\n        }\n\n        if(this.fbAccessToken) {\n            apiLogin(this.fbAccessToken)\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken)\n            }, {scope: 'public_profile,email'})\n        }\n\n        \n    }\n\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}\n\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt' , token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        \n        this.token = token\n    }\n\n    setAppLoaded =() => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal : Modal= {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    } \n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = []\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Debug)\n                .build()\n\n                this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error))\n\n                this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                    runInAction(() => {\n                        comments.forEach(comment => {\n                            comment.createdAt = new Date(comment.createdAt)\n                        })\n                        this.comments = comments\n                    })\n                })\n                \n                this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                      runInAction(() => {\n                        comment.createdAt = new Date(comment.createdAt)\n                        this.comments.unshift(comment)\n                      });\n                })\n                \n        }\n\n\n    }\n    \n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ' +  error))\n    }\n\n    clearComments = () => {\n        this.comments = []\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    localeDate = (utcDate: Date) => {\n        var date = new Date(utcDate);\n    \n        var localOffset = date.getTimezoneOffset() * 60000;\n        var localTime = date.getTime();\n        \n        var returnDate = localTime - localOffset;\n        \n        date = new Date(returnDate);\n        \n        return date\n    }\n\n\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\n\n\nexport default observer ( function NavBar() {\n\n    const {userStore: {user, logout}}= useStore();\n\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} exact to='/' header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to ='/createActivity' positive content='Create Activity'/>\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right'/>\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n\n    const{ activityStore} = useStore();\n\n    return (\n        <>\n        <Menu vertical size='large' style={{width: '100%', marginTop: 28}}>\n            <Header icon='filter' attached color='teal' content='Filters' />\n            <Menu.Item \n                content = 'All Activities' \n                active={activityStore.predicate.has('all')}\n                onClick={() => activityStore.setPredicate('all', true)}\n                />\n            <Menu.Item \n                content = \"I'm Going\" \n                active={activityStore.predicate.has('isGoing')}\n                onClick={() => activityStore.setPredicate('isGoing', true)}\n                />\n            <Menu.Item \n                content = \"I'm Hosting\" \n                active={activityStore.predicate.has('isHost')}\n                onClick={() => activityStore.setPredicate('isHost', true)}\n                />\n        </Menu>\n        <Header />\n        <Calendar \n            onChange={(date) => activityStore.setPredicate('startDate', (date as Date))}\n            value={activityStore.predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react'\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({profile}: Props) {\n\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore\n\n    if(userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not Following'} />\n\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                    fluid\n                    basic \n                    color={profile.following ? 'red' : 'green'} \n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)} />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0,37 )+ '...' : str\n\n        }\n    }\n\n    return(\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user'/>\n                {profile.followersCount} Followers\n            </Card.Content>\n            <FollowButton profile={profile}/>\n        </Card>\n    )\n\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[]\n}\n\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\n\n    const styles = {\n        borderColor: 'orange',\n        boarderWidth: 4\n    }\n\n    return(\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup hoverable key={attendee.username} trigger={\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                    <Image \n                        size='mini' \n                        circular src={attendee.image || '/assets/user.png' }\n                        bordered\n                        style={attendee.following ? styles : null}\n                        />\n                    </List.Item>\n                }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}           \n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\n//import { useStore } from '../../../app/stores/store';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\n\n\nexport default function ActivityListItem({activity}: Props) {\n    \n\n    //const {activityStore} = useStore();    \n    //const {deleteActivity} = activityStore\n    //const [target, setTarget] = useState('');\n\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' style={{textAlign: 'center'}} content='Activity Cancelled'/>}\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBotton: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                   </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')} \n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View' />\n            </Segment>\n        </Segment.Group>\n    )\n\n\n\n\n}\n\n\n\n\n","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\n\nexport default observer(function ActivityList() {\n    \n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n\n    \n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n\n                            {activities.map(activity => (\n                                <ActivityListItem key={activity.id} activity={activity} />\n                            ))}\n\n                </Fragment>\n            ))}\n        </>\n    )\n})","\nimport React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState} from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport {  Grid, Loader } from 'semantic-ui-react';\n\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\n\n\nexport default observer(function ActivityDashboard() {\n\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false)\n    \n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n      if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n  \n      \n    \n  \n    \n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                <InfiniteScroll \n                    pageStart={0} \n                    loadMore={handleGetNext} \n                    hasMore={!loadingNext && !!pagination  && pagination.currentPage < pagination.totalPages}\n                    initialLoad={false} >\n                    <ActivityList />\n                </InfiniteScroll>\n                )} \n                \n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Input, Label } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string\n\n}\n\nexport default function MeTextInput(props: Props){\n    const [field, meta] = useField(props.name)\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n\n        </Form.Field>\n    )\n\n}","\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n             initialValues={{email: '', password: '', error: null}} \n             onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error: 'Invalid email or password'}))} \n        > \n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Pasword' type='password'/>\n\n                    <ErrorMessage \n                    name='error' render={() => \n                    <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />} \n                    />\n                    \n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                    \n                </Form>\n            )}\n\n\n        </Formik>\n    )\n})","\nimport React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any | null;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i} >\n                            {errors}\n                        </Message.Item>\n                    ))}\n                </Message.List>\n\n            )}\n        </Message>\n    )\n}","\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n             initialValues={{displayName: '', username: '', email: '', password: '', error: null}} \n             onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => setErrors({error}))} \n             validationSchema={Yup.object({\n                 displayName: Yup.string().required(),\n                 username: Yup.string().required(),\n                 email: Yup.string().required().email(),\n                 password: Yup.string().required(),\n             })}\n        > \n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Pasword' type='password'/>\n\n                    <ErrorMessage \n                    name='error' render={() => \n                    <ValidationErrors errors={errors.error} />} \n                    />\n                    \n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                    \n                </Form>\n            )}\n\n\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer ( function HomePage(){\n\n    const {userStore, modalStore} = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\n                    Reactivities\n                </Header>\n\n                {userStore.isLoggedIn ? (\n                    <>\n                    <Header as='h2' inverted content='Welcome to Reactiviies' />\n                    <Button as={Link} to='/activities' size='huge' inverted >\n                        Go to Activities!\n                    </Button>\n                    </>\n                ) : (\n                    <>\n                    <Button size='huge' inverted onClick={() => modalStore.openModal(<LoginForm />)}>\n                        Login to see the Reactivities!\n                    </Button>\n                    <Button size='huge' inverted onClick={() => modalStore.openModal(<RegisterForm />)}>\n                        Register!\n                    </Button>\n                    <Divider horizontal  inverted>Or</Divider>\n                    <Button \n                        loading={userStore.fbLoading}\n                        size='huge' \n                        inverted \n                        color='facebook'\n                        content='Login with Fartbook'\n                        onClick={() => userStore.facebookLogin()}\n                        />\n                    </>\n                )}                \n               \n            </Container>\n        </Segment>\n    )\n})","\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingCompoenent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n\n}\n\nexport default function MyTextArea(props: Props){\n    const [field, meta] = useField(props.name)\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n\n        </Form.Field>\n    )\n\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string\n\n}\n\nexport default function MeSelectInput(props: Props){\n    const [field, meta, helpers] = useField(props.name)\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n\n        </Form.Field>\n    )\n\n}","export const categoryOptions = [\n    {text: 'Animals', value: 'animals'},\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'}\n]","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\n\n\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\n    const [field, meta, helpers] = useField(props.name!)\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n\n            />\n            \n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n\n        </Form.Field>\n    )\n\n}","import { observer } from 'mobx-react-lite';\nimport {useState} from 'react';\nimport { useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button,   Header,   Segment } from 'semantic-ui-react';\nimport LoadingCompoenent from '../../../app/layout/LoadingComponent';\n\nimport { useStore } from '../../../app/stores/store';\nimport {v4 as uuid} from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\n\n\nexport default observer(function ActivityForm() {\n\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required.'),\n        description: Yup.string().required('The activity description is required.'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required.').nullable(),\n        city: Yup.string().required(),\n        venue: Yup.string().required()\n\n    })\n\n   useEffect(() => {\n       if(id) loadActivity(id).then(activity => setActivity( new ActivityFormValues(activity)))\n   }, [id, loadActivity]);\n    \n\n     function handleFormSubmit(activity: ActivityFormValues) {\n       if(!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n             };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n         } else {\n             updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n         }\n    }\n\n\n\n    if(loadingInitial) return <LoadingCompoenent content='Loading...' />\n\n    return (\n        <Segment clearing>\n            <Header contect='Activity Details' sub color='teal'/>\n            <Formik \n            validationSchema={validationSchema}\n            enableReinitialize \n            initialValues={activity} \n            onSubmit={values => handleFormSubmit(values)}>\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea placeholder='Description'  name='description'  rows={3} />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput placeholderText='Date'  name='date' showTimeSelect timeCaption='time' dateFormat='MMMM d, yyyy h:mm aa'/>\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City'  name='city' />\n                        <MyTextInput placeholder='Venue'  name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} \n                            floated='right' \n                            positive type='submit' \n                            content='submit'/>\n                        <Button as={Link} to='/activities' floated='right' type='button' content='cancel'/>\n                    </Form>\n                )}\n\n            </Formik>\n\n        </Segment>\n    )\n})","import { Field, FieldProps, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {Segment, Header, Comment,   Loader} from 'semantic-ui-react'\n\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns';\n\n\ninterface Props {\n    activityId: string\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n\n    const {commentStore} = useStore();\n   \n\n    \n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId)\n        }\n\n        return () => {\n            commentStore.clearComments()\n        }\n    }, [commentStore, activityId])\n\n    \n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n                \n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached>\n            <Formik \n                        onSubmit={(values, {resetForm}) => commentStore.addComment(values).then(() => resetForm())}   \n                        initialValues={{body: ''}} \n                        validationSchema={Yup.object({\n                            body: Yup.string().required()\n                        })}\n                    >\n                        {({isSubmitting, isValid, handleSubmit}) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{position: 'relative'}}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea \n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={3}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key=== 'Enter' && e.shiftKey)\n                                                {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}    \n                                        />\n                                    </div>\n                                )}\n                            </Field> \n                        </Form>\n                        )}\n                    \n                    </Formik>\n\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                    <Comment key={comment.id}>\n                        <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                        <Comment.Content>\n                            <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.username}</Comment.Author>\n                            <Comment.Metadata>\n                                <div>{formatDistanceToNow(commentStore.localeDate(comment.createdAt))} ago</div>\n                            </Comment.Metadata>\n                            <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                            <Comment.Actions>\n                                <Comment.Action>Reply</Comment.Action>\n                            </Comment.Actions>\n                        </Comment.Content>\n                    </Comment>\n                    ))}\n                    \n\n                    \n                    \n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n\n    return (\n        <Segment.Group>\n            {activity.isCancelled && \n                <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} ribbon color='red' content='Cancelled' />\n            }\n            <Segment basic attached='top' style={{padding: '0'}}>\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}> {activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                    <Button \n                        color={activity.isCancelled ? 'green' : 'red'} \n                        floated='left' \n                        basic \n                        content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                        onClick={cancelActivityToggle}\n                        loading={loading}\n                        />\n                    <Button \n                        disabled={activity.isCancelled}\n                        as={Link} \n                        to={`/manage/${activity.id}`} \n                        color='orange' \n                        floated='right'>\n                        Manage Event\n                    </Button>\n                    </>\n                    \n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button loading={loading} disabled={activity.isCancelled}  onClick={updateAttendance} color='teal'>Join Activity</Button>\n                )}\n               \n            </Segment>\n        </Segment.Group>\n    )\n})\n\n","\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if (!attendees) return null;\n\n    \n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length}{attendees.length === 1 ? ' Person is ' : ' People are '} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                    <Item style={{ position: 'relative' }} key={attendee.username}>\n                        {attendee.username === host?.username &&\n                        <Label\n                            style={{ position: 'absolute' }}\n                            color='orange'\n                            ribbon='right'\n                        >\n                            Host\n                        </Label>}\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                        <Item.Content verticalAlign='middle'>\n                            <Item.Header as='h3'>\n                                <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                            </Item.Header>\n                            {attendee.following &&\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                            }\n                        </Item.Content>\n                    </Item>\n                    ))}\n\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n\n\n","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\n\n\nexport default observer(function ActivityDetails() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if(id) loadActivity(id);\n        return () => clearSelectedActivity()\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if(loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat activityId={activity.id}/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity}/>\n            </Grid.Column>\n        </Grid>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && \n                <Segment>\n                    <Header as='h4' content='Stack Trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer (function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","\nimport React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL\n    const [errors, setErrors] = useState(null)\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && \n                <ValidationErrors errors={errors} />   \n            }\n        </>\n    )\n}\n\n\n","\nimport {Form, Formik} from 'formik'\nimport * as Yup from 'yup'\n\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useStore } from '../../app/stores/store'\n\nimport { Button } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport MyTextArea from '../../app/common/form/MyTextArea'\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer (function ProfileEditForm({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore()\n\n    return (\n        <>\n        <Formik \n            initialValues={{displayName: profile?.displayName, bio: profile?.bio, username: profile?.username}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false)\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n            >\n                {({isSubmitting, isValid, dirty}) => (\n                    <Form className='ui form'>\n                        <MyTextInput name='displayName' placeholder='Display Name' />\n                        <MyTextArea name='bio' rows={3} placeholder='Add your bio'/>\n                        \n                            <Button\n                                positive\n                                type='submit'\n                                loading={isSubmitting}\n                                content='Update Profile'\n                                floated='right'\n                                disabled={!isValid || !dirty}\n\n                                \n\n                            />\n                    </Form>\n                )}\n        </Formik>\n        </>\n    )\n})","import React, {useState} from 'react';\n     import {useStore} from \"../../app/stores/store\";\n     import {Button, Grid, Header, Tab} from \"semantic-ui-react\";\n     import ProfileEditForm from \"./ProfileEdit\";\n     import { observer } from 'mobx-react-lite';\n     \n     export default observer(function ProfileAbout() {\n         const {profileStore} = useStore();\n         const {isCurrentUser, profile} = profileStore;\n         const [editMode, setEditMode] = useState(false);\n         return (\n             <Tab.Pane>\n                 <Grid>\n                    <Grid.Column width='16'>\n                         <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                         \n                         {isCurrentUser && (\n                             <Button                                  \n                             floated='right'\n                             basic\n                             content={editMode ? 'Cancel' : 'Edit Profile'}\n                             onClick={() => setEditMode(!editMode)}\n                        /> )}\n                        \n                 </Grid.Column>\n                 <>\n                 <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> \n                        : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                 </Grid.Column>\n                 </>\n             </Grid>\n         </Tab.Pane>\n     )\n})\n \n ","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useEffect } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react';\nimport { format } from 'date-fns';\n\nimport { useStore } from '../../app/stores/store';\nimport { UserActivity } from '../../app/models/profile';\n\n\n\nconst panes = [\n    {menuItem: 'Future Events', pane: {key: 'future'}},\n    {menuItem: 'Past Activities', pane: {key: 'past'}},\n    {menuItem: 'Hosting', pane: {key: 'hosting'}}\n]\n\nexport default observer( function ProfileActivities(){\n\n    const {profileStore} = useStore()\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities,\n    } = profileStore\n\n    useEffect(() => {\n        loadUserActivities(profile!.username, panes[0].pane.key )\n        \n    }, [loadUserActivities, profile])\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\n    }\n\n   \n\n    return(\n        <Tab.Pane loading={loadingActivities}>\n          <Grid>\n              <Grid.Column width={16}>\n                  <Header floated='left' icon='calendar' content={'Activities'}/>\n              </Grid.Column>\n              <Grid.Column width={16}>\n                    <Tab panes={panes} menu={{secondary: true, pointing: true}} onTabChange={(e, data) => handleTabChange(e, data)} />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                    <Image \n                                        src={`/assets/categoryImages/${activity.category}.jpg`}\n                                        style={{minHeight: 100, objectFit: 'cover'}}\n                                    />\n                                    <Card.Content>\n                                        <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                        <Card.Meta textAlign='center'>\n                                            <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                            <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                        </Card.Meta>\n                                    </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n              </Grid.Column>\n              \n          </Grid>\n\n        </Tab.Pane>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    \n    \n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' \n                    content={\n                        activeTab === 3 ?\n                        `People following ${profile?.displayName} ` : `People ${profile?.displayName} follows`\n                            } />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n  \n    const dzStyles ={\n        border: 'ashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive ={\n        borderColor: 'green'\n    }\n  \n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    \n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop Image Here' />\n        </div>\n  )\n}","import React from 'react'\nimport {Cropper} from 'react-cropper'\nimport 'cropperjs/dist/cropper.css'\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n\n    return(\n        <Cropper\n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n\n            />\n    )\n\n}","import React, { useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\nimport {Cropper} from 'react-cropper'\nimport { useEffect } from 'react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n\n\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if(cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\n        }\n    }, [files])\n\n    return(\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo'/>\n                <PhotoWidgetDropzone setFiles={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize Image'/>\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )} \n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\n                {files && files.length > 0 &&                 \n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\n                <Button.Group widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check'/>\n                    <Button disabled = {loading} onClick={() => setFiles([])}  icon='check'/>\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useState } from 'react'\nimport { Card, Tab, Header, Image, Grid, Button } from 'semantic-ui-react'\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\nimport { Photo, Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer( function ProfilePhotos({profile}: Props) {\n\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, setMainPhoto, loading, deletePhoto}} = useStore()\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false))\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name)\n        setMainPhoto(photo)\n    }\n\n    function handleDeletePhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name)\n        deletePhoto(photo)\n    }\n\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                            onClick={() => setAddPhotoMode(!addPhotoMode)}/>\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\n                    ) : (\n                        <Card.Group>\n                            {profile.photos?.map( photo => (\n                            <Card key={photo.id}>\n                                <Image src={photo.url} />\n                                {isCurrentUser && (\n                                    <Button.Group fluid widths={2}>\n                                        <Button \n                                            basic color='green' \n                                            content='Main' \n                                            name={'main' + photo.id} \n                                            disabled={photo.isMain} \n                                            loading={target === 'main' + photo.id && loading} \n                                            onClick={e => handleSetMainPhoto(photo, e)}\n                                        />\n                                        <Button \n                                            basic \n                                            color='red' \n                                            icon='trash'\n                                            loading = {target === photo.id && loading}\n                                            onClick={e => handleDeletePhoto(photo, e)}\n                                            disabled={photo.isMain}\n                                            name={photo.id}\n                                        />\n                                    </Button.Group>\n                                )}\n                            </Card>\n                            ))}\n                \n                        </Card.Group>\n                    )}\n\n                </Grid.Column>\n                \n            </Grid>\n\n            \n            \n        </Tab.Pane>\n    )\n\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\n    ]\n\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        \n        /> \n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer( function ProfileHeader({profile} : Props) {\n\n    return(\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingCompoenent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username)\n        return () => {\n            setActiveTab(0)\n        }\n    }, [loadProfile, setActiveTab, username])\n\n    if (loadingProfile) return (<LoadingCompoenent content='Loading Profile...' />)\n\n    return(\n        <Grid>\n            <Grid.Column width={16}>\n                {profile && \n                <>\n                <ProfileHeader profile={profile}/>\n                <ProfileContent profile={profile}/>\n                </>\n                }\n            </Grid.Column>\n        </Grid>\n            \n    )\n})","import React from 'react'\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router'\nimport { useStore } from '../stores/store'\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore()\n\n    return (\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\n\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\n\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport LoginForm from '../../features/users/LoginForm';\nimport {useStore} from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport TestErrors from '../../features/errors/TestError';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded())\n      commonStore.setAppLoaded()\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n \n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n        path={'/(.+)'}\n        render={() => (\n          <>\n        <NavBar />\n        <Container style={{marginTop: '7em'}}>\n          <Switch>\n            <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n            <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n            <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n            <Route path='/login' component={LoginForm} />\n            <PrivateRoute path='/profiles/:username'component={ProfilePage}/>\n            <Route path='/errors' component={TestErrors}/>\n            <Route path='/server-error' component={ServerError} />\n            <Route component={NotFound} />\n          </Switch>\n        </Container>\n          </>\n        )} />\n\n        \n    </>\n  );\n}\n\nexport default observer(App)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from 'react'\nimport {useLocation} from 'react-router-dom'\n\nexport default function ScrollToTop() {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0,0)\n    }, [pathname])\n\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/layout/App';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport  './app/layout/styles.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}