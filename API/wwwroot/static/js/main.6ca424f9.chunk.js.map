{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/errors/TestError.tsx","features/profiles/ProfileEdit.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/Util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","bio","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","loadActivities","setLoadingInitial","axiosParams","result","forEach","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUserName","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","value","resetPredicate","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","loadingActivities","userActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setBio","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","newDisplayName","newBio","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Debug","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","localeDate","utcDate","localOffset","getTimezoneOffset","localTime","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","exact","to","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","setPredicate","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","extra","Icon","styles","borderColor","boarderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBotton","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MeTextInput","props","useField","field","meta","Form","Field","touched","label","Input","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","marginBottom","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingCompoenent","Dimmer","MyTextArea","MeSelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","contect","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","Actions","Action","activityImageStyle","activityImageTextStyle","bottom","left","height","zIndex","top","ribbon","padding","verticalAlign","relaxed","divided","Extra","NotFound","Inline","primary","message","Modal","onClose","TestErrors","widths","baseUrl","setEditMode","isCurrentUser","Tab","Pane","ProfileEdit","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","LoginForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.6ca424f9.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    titalItems: number;\n    totalPages: number\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber: number = 1;\n    pageSize: number;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile,  UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL //'http://localhost:5000/api';\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = ` Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n\n        if (process.env.NODE_ENV ==='development') await sleep(1000);\n        \n        const pagination = response.headers['pagination'];\n        if(pagination) {\n            response.data = new PaginatedResult(response.data, JSON.parse(pagination))\n            return response as AxiosResponse<PaginatedResult<any>>;\n        }\n        return response;\n    \n},(error: AxiosError) => {\n    const {data, status, config, headers} = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error('not found');\n            }\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } \n            toast.error('bad request');\n            break;\n        case 401:\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\n                store.userStore.logout()\n                toast.error('Session expired. Please login again')\n            }\n            toast.error('unauthorized');\n            break;\n        case 404:\n            history.push('/not-found');\n            toast.error('not found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody)\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\n    verifyEmail: (token: string, email: string) => requests.post<void>(`account/verifyEmail?token=${token}&email=${email}`,{}),\n    resendEmailConfirm: (email: string) => requests.get(`/account/resendEmailConfirmationLink?email=${email}`)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData()\n        formData.append('File', file)\n        return axios.post<Photo>('photos', formData, {\n            headers: {'content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles/${profile.username}`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","\nimport { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUserName: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n}\n\nexport class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n        Object.assign(this, init)\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n        if(activity) {\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.city = activity.city;\n            this.venue = activity.venue\n        }\n    }\n    \n}","\n\nimport { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n        this.bio = user.bio;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}\n\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\"\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\"\nimport {format} from 'date-fns'\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\n\n\nexport default class ActivityStore {\n    \n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor(){\n        makeAutoObservable(this)\n\n        reaction(\n            () => this.predicate.keys(), \n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams =(pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    \n    setPredicate(predicate: string , value: string | Date | boolean) {\n\n        const resetPredicate = () => {\n        \n            \n            this.predicate.forEach((value, key) => {\n                if(key !== 'startDate') {\n                    this.predicate.delete(key)\n                }\n            });\n        }\n\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true)\n                break;\n            case 'isGoing':\n                resetPredicate()\n                this.predicate.set('isGoing', true)\n                break;\n            case 'isHost':\n                resetPredicate()\n                this.predicate.set('isHost', true)\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate')\n                this.predicate.set('startDate', value)\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams()\n        params.append('pageNumber', this.pagingParams.pageNumber.toString())\n        params.append('pageSize', this.pagingParams.pageSize.toString())\n        this.predicate.forEach((value, key) => {\n            if(key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value)\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime())\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n    \n\n    loadActivities = async () => {\n        this.setLoadingInitial(true);\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => { \n                this.setActivity(activity);\n                //this.activities.push(activity);\n            })\n            this.setPagination(result.pagination)\n              this.setLoadingInitial(false);;\n        } catch (error) {\n            console.log(error);\n            \n            this.setLoadingInitial(false);; \n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity)\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity\n            } catch (error) {\n                console.log(error)\n                this.setLoadingInitial(false)\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUserName === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUserName)\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    \n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!)\n        //activity.id = uuid();\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity)\n            newActivity.hostUserName = user!.username\n            newActivity.attendees = [attendee]\n            this.setActivity(newActivity)\n            runInAction(() => {\n                //this.activities.push(activity);\n                \n                this.selectedActivity = newActivity;\n                \n                \n            })\n        } catch (error) {\n            console.log(error);\n            \n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        \n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if(activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);   \n        }\n\n    }\n\n    deleteActivity = async (id:string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                //this.activities = [...this.activities.filter(a => a.id !== id)];\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n\n        } catch (error) {\n            console.log(error);\n            this.loading = false;\n        }\n        \n\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(a => a.username !== user?.username)\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!)\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error)\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle =  async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error)\n        } finally {\n            runInAction(() => this.loading = false)\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount -- : attendee.followersCount ++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab: any = 0;\n    loadingActivities = false;\n    userActivities: UserActivity[] = [];\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if(activeTab === 3 || activeTab === 4)\n                {\n                    const predicate = activeTab === 3 ? 'followers' : 'following'\n                    this.loadFollowings(predicate)\n                } else {\n                    this.followings = []\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if(store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async(username:string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loadingProfile = false)\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file)\n            const photo = response.data\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo)\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.uploading = false)\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true\n        try {\n            await agent.Profiles.setMainPhoto(photo.id)\n            store.userStore.setImage(photo.url)\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => this.loading = false)\n            console.log(error)\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id)\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id)\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => this.loading = false)\n            console.log(error)\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            agent.Profiles.updateProfile(profile)\n            runInAction(() => {\n                if(profile.bio && profile.bio !== store.userStore.user?.bio) {\n                    store.userStore.setBio(profile.bio)\n                }\n                if(profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName)   \n                }\n                this.profile = {...this.profile, ...profile as Profile}\n                    this.loading = false\n            })\n\n        } catch(error) {\n            runInAction(() => this.loading = false)\n            console.log(error)\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username)\n            runInAction(() => {\n                if(this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if(profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loading = false)\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch(error) {\n            console.log(error)\n            runInAction(() => this.loadingFollowings = false)\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        if (predicate === null || undefined)\n        {\n            predicate = 'future'\n        }\n        try {\n            const userActivities = await agent.Profiles.listActivities(username, predicate!)\n            \n            runInAction(() => {\n                this.userActivities = userActivities;\n                this.loadingActivities = false;\n            })\n        } catch(error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n    fbAccessToken: string | null = null;\n    fbLoading = false;\n    refreshTokenTimeout: any;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try{\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            this.startRefreshTokenTimer(user);\n            runInAction(() => this.user = user);\n            history.push('/activities')\n            store.modalStore.closeModal();\n            \n            console.log(user)\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            this.startRefreshTokenTimer(user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try{\n            await agent.Account.register(creds);\n            history.push(`/account/registerSuccess?email=${creds.email}`)\n            store.modalStore.closeModal();\n            \n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) {\n            this.user.image = image\n        }\n    }\n\n    setDisplayName = (newDisplayName: string) => {\n        if (this.user) {\n            this.user.displayName = newDisplayName\n        }\n    }\n\n    setBio = (newBio: string) => {\n        if (this.user) {\n            this.user.bio = newBio;\n        }\n    }\n\n    getFacebookLoginStatus = async () => {\n        window.FB.getLoginStatus(response => {\n            if(response.status === 'connected') {\n                    this.fbAccessToken = response.authResponse.accessToken;\n                }\n            })\n    }\n\n    facebookLogin = () => {\n        this.fbLoading = true\n\n        const apiLogin = (accessToken: string) => {\n            agent.Account.fbLogin(accessToken).then(user => {\n                store.commonStore.setToken(user.token)\n                this.startRefreshTokenTimer(user);\n                runInAction(() => {\n                    this.user = user\n                    this.fbLoading = false\n                })\n                history.push(\"/activities\")\n            }).catch(error => {\n                console.log(error)\n                runInAction(() => this.fbLoading = false)\n            })\n        }\n\n        if(this.fbAccessToken) {\n            apiLogin(this.fbAccessToken)\n        } else {\n            window.FB.login(response => {\n                apiLogin(response.authResponse.accessToken)\n            }, {scope: 'public_profile,email'})\n        }\n\n        \n    }\n\n    refreshToken = async () => {\n        this.stopRefreshTokenTimer()\n        try {\n            const user = await agent.Account.refreshToken()\n            runInAction(() => this.user = user)\n            store.commonStore.setToken(user.token)\n            this.startRefreshTokenTimer(user);\n        } catch(error) {\n            console.log(error);\n        }\n    }\n\n    private startRefreshTokenTimer(user: User) {\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout)\n    }\n\n    private stopRefreshTokenTimer() {\n        clearTimeout(this.refreshTokenTimeout)\n    }\n\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}\n\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt' , token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        \n        this.token = token\n    }\n\n    setAppLoaded =() => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal : Modal= {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    } \n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = []\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Debug)\n                .build()\n\n                this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error))\n\n                this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                    runInAction(() => {\n                        comments.forEach(comment => {\n                            comment.createdAt = new Date(comment.createdAt)\n                        })\n                        this.comments = comments\n                    })\n                })\n                \n                this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                      runInAction(() => {\n                        comment.createdAt = new Date(comment.createdAt)\n                        this.comments.unshift(comment)\n                      });\n                })\n                \n        }\n\n\n    }\n    \n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ' +  error))\n    }\n\n    clearComments = () => {\n        this.comments = []\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    localeDate = (utcDate: Date) => {\n        var date = new Date(utcDate);\n    \n        var localOffset = date.getTimezoneOffset() * 60000;\n        var localTime = date.getTime();\n        \n        var returnDate = localTime - localOffset;\n        \n        date = new Date(returnDate);\n        \n        return date\n    }\n\n\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\n\n\nexport default observer ( function NavBar() {\n\n    const {userStore: {user, logout, isLoggedIn}}= useStore();\n\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} exact to='/' header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\n                    Reactivities\n                </Menu.Item>\n                {isLoggedIn && \n                <>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to ='/createActivity' positive content='Create Activity'/>\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right'/>\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n                </> }\n            </Container>\n\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n\n    const{ activityStore} = useStore();\n\n    return (\n        <>\n        <Menu vertical size='large' style={{width: '100%', marginTop: 28}}>\n            <Header icon='filter' attached color='teal' content='Filters' />\n            <Menu.Item \n                content = 'All Activities' \n                active={activityStore.predicate.has('all')}\n                onClick={() => activityStore.setPredicate('all', true)}\n                />\n            <Menu.Item \n                content = \"I'm Going\" \n                active={activityStore.predicate.has('isGoing')}\n                onClick={() => activityStore.setPredicate('isGoing', true)}\n                />\n            <Menu.Item \n                content = \"I'm Hosting\" \n                active={activityStore.predicate.has('isHost')}\n                onClick={() => activityStore.setPredicate('isHost', true)}\n                />\n        </Menu>\n        <Header />\n        <Calendar \n            onChange={(date) => activityStore.setPredicate('startDate', (date as Date))}\n            value={activityStore.predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react'\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({profile}: Props) {\n\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore\n\n    if(userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not Following'} />\n\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                    fluid\n                    basic \n                    color={profile.following ? 'red' : 'green'} \n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)} />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0,37 )+ '...' : str\n\n        }\n    }\n\n    return(\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user'/>\n                {profile.followersCount} Followers\n            </Card.Content>\n            <FollowButton profile={profile}/>\n        </Card>\n    )\n\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[]\n}\n\nexport default observer(function ActivityListItemAttendee({attendees}: Props) {\n\n    const styles = {\n        borderColor: 'orange',\n        boarderWidth: 4\n    }\n\n    return(\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup hoverable key={attendee.username} trigger={\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                    <Image \n                        size='mini' \n                        circular src={attendee.image || '/assets/user.png' }\n                        bordered\n                        style={attendee.following ? styles : null}\n                        />\n                    </List.Item>\n                }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}           \n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\n//import { useStore } from '../../../app/stores/store';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\n\n\nexport default function ActivityListItem({activity}: Props) {\n    \n\n    //const {activityStore} = useStore();    \n    //const {deleteActivity} = activityStore\n    //const [target, setTarget] = useState('');\n\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' style={{textAlign: 'center'}} content='Activity Cancelled'/>}\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBotton: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link> </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                   </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')} \n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View' />\n            </Segment>\n        </Segment.Group>\n    )\n\n\n\n\n}\n\n\n\n\n","import { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\n\nexport default observer(function ActivityList() {\n    \n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n\n\n    \n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n\n                            {activities.map(activity => (\n                                <ActivityListItem key={activity.id} activity={activity} />\n                            ))}\n\n                </Fragment>\n            ))}\n        </>\n    )\n})","\nimport React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState} from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport {  Grid, Loader } from 'semantic-ui-react';\n\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\n\n\nexport default observer(function ActivityDashboard() {\n\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false)\n    \n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n      if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])\n  \n      \n    \n  \n    \n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                <InfiniteScroll \n                    pageStart={0} \n                    loadMore={handleGetNext} \n                    hasMore={!loadingNext && !!pagination  && pagination.currentPage < pagination.totalPages}\n                    initialLoad={false} >\n                    <ActivityList />\n                </InfiniteScroll>\n                )} \n                \n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    )\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Input, Label } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string\n\n}\n\nexport default function MeTextInput(props: Props){\n    const [field, meta] = useField(props.name)\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n\n        </Form.Field>\n    )\n\n}","\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n             initialValues={{email: '', password: '', error: null}} \n             onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => setErrors({error: error.response.data}))} \n        > \n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Pasword' type='password'/>\n\n                    <ErrorMessage \n                    name='error' render={() => \n                    <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />} \n                    />\n                    \n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                    \n                </Form>\n            )}\n\n\n        </Formik>\n    )\n})","\nimport React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any | null;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i} >\n                            {errors}\n                        </Message.Item>\n                    ))}\n                </Message.List>\n\n            )}\n        </Message>\n    )\n}","\nimport { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n\n    const {userStore} = useStore();\n\n    return (\n        <Formik\n             initialValues={{displayName: '', username: '', email: '', password: '', error: null}} \n             onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => setErrors({error}))} \n             validationSchema={Yup.object({\n                 displayName: Yup.string().required(),\n                 username: Yup.string().required(),\n                 email: Yup.string().required().email(),\n                 password: Yup.string().required(),\n             })}\n        > \n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Pasword' type='password'/>\n\n                    <ErrorMessage \n                    name='error' render={() => \n                    <ValidationErrors errors={errors.error} />} \n                    />\n                    \n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                    \n                </Form>\n            )}\n\n\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer ( function HomePage(){\n\n    const {userStore, modalStore} = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\n                    Reactivities\n                </Header>\n\n                {userStore.isLoggedIn ? (\n                    <>\n                    <Header as='h2' inverted content='Welcome to Reactiviies' />\n                    <Button as={Link} to='/activities' size='huge' inverted >\n                        Go to Activities!\n                    </Button>\n                    </>\n                ) : (\n                    <>\n                    <Button size='huge' inverted onClick={() => modalStore.openModal(<LoginForm />)}>\n                        Login to see the Reactivities!\n                    </Button>\n                    <Button size='huge' inverted onClick={() => modalStore.openModal(<RegisterForm />)}>\n                        Register!\n                    </Button>\n                    <Divider horizontal  inverted>Or</Divider>\n                    <Button \n                        loading={userStore.fbLoading}\n                        size='huge' \n                        inverted \n                        color='facebook'\n                        content='Login with Fartbook'\n                        onClick={() => userStore.facebookLogin()}\n                        />\n                    </>\n                )}                \n               \n            </Container>\n        </Segment>\n    )\n})","\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingCompoenent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n\n}\n\nexport default function MyTextArea(props: Props){\n    const [field, meta] = useField(props.name)\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n\n        </Form.Field>\n    )\n\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string\n\n}\n\nexport default function MeSelectInput(props: Props){\n    const [field, meta, helpers] = useField(props.name)\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n\n        </Form.Field>\n    )\n\n}","export const categoryOptions = [\n    {text: 'Animals', value: 'animals'},\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'}\n]","import { useField } from 'formik';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\n\n\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>){\n    const [field, meta, helpers] = useField(props.name!)\n\n    return(\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n\n            />\n            \n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n\n        </Form.Field>\n    )\n\n}","import { observer } from 'mobx-react-lite';\nimport {useState} from 'react';\nimport { useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button,   Header,   Segment } from 'semantic-ui-react';\nimport LoadingCompoenent from '../../../app/layout/LoadingComponent';\n\nimport { useStore } from '../../../app/stores/store';\nimport {v4 as uuid} from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\n\n\nexport default observer(function ActivityForm() {\n\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required.'),\n        description: Yup.string().required('The activity description is required.'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required.').nullable(),\n        city: Yup.string().required(),\n        venue: Yup.string().required()\n\n    })\n\n   useEffect(() => {\n       if(id) loadActivity(id).then(activity => setActivity( new ActivityFormValues(activity)))\n   }, [id, loadActivity]);\n    \n\n     function handleFormSubmit(activity: ActivityFormValues) {\n       if(!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n             };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n         } else {\n             updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n         }\n    }\n\n\n\n    if(loadingInitial) return <LoadingCompoenent content='Loading...' />\n\n    return (\n        <Segment clearing>\n            <Header contect='Activity Details' sub color='teal'/>\n            <Formik \n            validationSchema={validationSchema}\n            enableReinitialize \n            initialValues={activity} \n            onSubmit={values => handleFormSubmit(values)}>\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea placeholder='Description'  name='description'  rows={3} />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput placeholderText='Date'  name='date' showTimeSelect timeCaption='time' dateFormat='MMMM d, yyyy h:mm aa'/>\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City'  name='city' />\n                        <MyTextInput placeholder='Venue'  name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} \n                            floated='right' \n                            positive type='submit' \n                            content='submit'/>\n                        <Button as={Link} to='/activities' floated='right' type='button' content='cancel'/>\n                    </Form>\n                )}\n\n            </Formik>\n\n        </Segment>\n    )\n})","import { Field, FieldProps, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport {Segment, Header, Comment,   Loader} from 'semantic-ui-react'\n\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns';\n\n\ninterface Props {\n    activityId: string\n}\n\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\n\n    const {commentStore} = useStore();\n   \n\n    \n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId)\n        }\n\n        return () => {\n            commentStore.clearComments()\n        }\n    }, [commentStore, activityId])\n\n    \n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n                \n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached>\n            <Formik \n                        onSubmit={(values, {resetForm}) => commentStore.addComment(values).then(() => resetForm())}   \n                        initialValues={{body: ''}} \n                        validationSchema={Yup.object({\n                            body: Yup.string().required()\n                        })}\n                    >\n                        {({isSubmitting, isValid, handleSubmit}) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{position: 'relative'}}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea \n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={3}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key=== 'Enter' && e.shiftKey)\n                                                {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}    \n                                        />\n                                    </div>\n                                )}\n                            </Field> \n                        </Form>\n                        )}\n                    \n                    </Formik>\n\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                    <Comment key={comment.id}>\n                        <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                        <Comment.Content>\n                            <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.username}</Comment.Author>\n                            <Comment.Metadata>\n                                <div>{formatDistanceToNow(commentStore.localeDate(comment.createdAt))} ago</div>\n                            </Comment.Metadata>\n                            <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                            <Comment.Actions>\n                                <Comment.Action>Reply</Comment.Action>\n                            </Comment.Actions>\n                        </Comment.Content>\n                    </Comment>\n                    ))}\n                    \n\n                    \n                    \n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n\n    return (\n        <Segment.Group>\n            {activity.isCancelled && \n                <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} ribbon color='red' content='Cancelled' />\n            }\n            <Segment basic attached='top' style={{padding: '0'}}>\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}> {activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                    <Button \n                        color={activity.isCancelled ? 'green' : 'red'} \n                        floated='left' \n                        basic \n                        content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                        onClick={cancelActivityToggle}\n                        loading={loading}\n                        />\n                    <Button \n                        disabled={activity.isCancelled}\n                        as={Link} \n                        to={`/manage/${activity.id}`} \n                        color='orange' \n                        floated='right'>\n                        Manage Event\n                    </Button>\n                    </>\n                    \n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button loading={loading} disabled={activity.isCancelled}  onClick={updateAttendance} color='teal'>Join Activity</Button>\n                )}\n               \n            </Segment>\n        </Segment.Group>\n    )\n})\n\n","\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if (!attendees) return null;\n\n    \n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length}{attendees.length === 1 ? ' Person is ' : ' People are '} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                    <Item style={{ position: 'relative' }} key={attendee.username}>\n                        {attendee.username === host?.username &&\n                        <Label\n                            style={{ position: 'absolute' }}\n                            color='orange'\n                            ribbon='right'\n                        >\n                            Host\n                        </Label>}\n                        <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                        <Item.Content verticalAlign='middle'>\n                            <Item.Header as='h3'>\n                                <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                            </Item.Header>\n                            {attendee.following &&\n                            <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                            }\n                        </Item.Content>\n                    </Item>\n                    ))}\n\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n\n\n","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\n\n\nexport default observer(function ActivityDetails() {\n\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if(id) loadActivity(id);\n        return () => clearSelectedActivity()\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if(loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat activityId={activity.id}/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity}/>\n            </Grid.Column>\n        </Grid>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && \n                <Segment>\n                    <Header as='h4' content='Stack Trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer (function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","\nimport React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL\n    const [errors, setErrors] = useState(null)\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && \n                <ValidationErrors errors={errors} />   \n            }\n        </>\n    )\n}\n\n\n","\nimport {Form, Formik} from 'formik'\nimport * as Yup from 'yup'\n\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useStore } from '../../app/stores/store'\n\nimport { Button } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport MyTextArea from '../../app/common/form/MyTextArea'\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n}\n\nexport default observer (function ProfileEditForm({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore()\n\n    return (\n        <>\n        <Formik \n            initialValues={{displayName: profile?.displayName, bio: profile?.bio, username: profile?.username}}\n            onSubmit={values => {\n                updateProfile(values).then(() => {\n                    setEditMode(false)\n                })\n            }}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required()\n            })}\n            >\n                {({isSubmitting, isValid, dirty}) => (\n                    <Form className='ui form'>\n                        <MyTextInput name='displayName' placeholder='Display Name' />\n                        <MyTextArea name='bio' rows={3} placeholder='Add your bio'/>\n                        \n                            <Button\n                                positive\n                                type='submit'\n                                loading={isSubmitting}\n                                content='Update Profile'\n                                floated='right'\n                                disabled={!isValid || !dirty}\n\n                                \n\n                            />\n                    </Form>\n                )}\n        </Formik>\n        </>\n    )\n})","import React, {useState} from 'react';\n     import {useStore} from \"../../app/stores/store\";\n     import {Button, Grid, Header, Tab} from \"semantic-ui-react\";\n     import ProfileEditForm from \"./ProfileEdit\";\n     import { observer } from 'mobx-react-lite';\n     \n     export default observer(function ProfileAbout() {\n         const {profileStore} = useStore();\n         const {isCurrentUser, profile} = profileStore;\n         const [editMode, setEditMode] = useState(false);\n         return (\n             <Tab.Pane>\n                 <Grid>\n                    <Grid.Column width='16'>\n                         <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                         \n                         {isCurrentUser && (\n                             <Button                                  \n                             floated='right'\n                             basic\n                             content={editMode ? 'Cancel' : 'Edit Profile'}\n                             onClick={() => setEditMode(!editMode)}\n                        /> )}\n                        \n                 </Grid.Column>\n                 <>\n                 <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> \n                        : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\n                 </Grid.Column>\n                 </>\n             </Grid>\n         </Tab.Pane>\n     )\n})\n \n ","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useEffect } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react';\nimport { format } from 'date-fns';\n\nimport { useStore } from '../../app/stores/store';\nimport { UserActivity } from '../../app/models/profile';\n\n\n\nconst panes = [\n    {menuItem: 'Future Events', pane: {key: 'future'}},\n    {menuItem: 'Past Activities', pane: {key: 'past'}},\n    {menuItem: 'Hosting', pane: {key: 'hosting'}}\n]\n\nexport default observer( function ProfileActivities(){\n\n    const {profileStore} = useStore()\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities,\n    } = profileStore\n\n    useEffect(() => {\n        loadUserActivities(profile!.username, panes[0].pane.key )\n        \n    }, [loadUserActivities, profile])\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key)\n    }\n\n   \n\n    return(\n        <Tab.Pane loading={loadingActivities}>\n          <Grid>\n              <Grid.Column width={16}>\n                  <Header floated='left' icon='calendar' content={'Activities'}/>\n              </Grid.Column>\n              <Grid.Column width={16}>\n                    <Tab panes={panes} menu={{secondary: true, pointing: true}} onTabChange={(e, data) => handleTabChange(e, data)} />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                    <Image \n                                        src={`/assets/categoryImages/${activity.category}.jpg`}\n                                        style={{minHeight: 100, objectFit: 'cover'}}\n                                    />\n                                    <Card.Content>\n                                        <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                        <Card.Meta textAlign='center'>\n                                            <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                            <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                        </Card.Meta>\n                                    </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n              </Grid.Column>\n              \n          </Grid>\n\n        </Tab.Pane>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    \n    \n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' \n                    content={\n                        activeTab === 3 ?\n                        `People following ${profile?.displayName} ` : `People ${profile?.displayName} follows`\n                            } />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n  \n    const dzStyles ={\n        border: 'ashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive ={\n        borderColor: 'green'\n    }\n  \n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    \n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop Image Here' />\n        </div>\n  )\n}","import React from 'react'\nimport {Cropper} from 'react-cropper'\nimport 'cropperjs/dist/cropper.css'\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n\n    return(\n        <Cropper\n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n\n            />\n    )\n\n}","import React, { useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\nimport {Cropper} from 'react-cropper'\nimport { useEffect } from 'react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n\n\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if(cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\n        }\n    }, [files])\n\n    return(\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo'/>\n                <PhotoWidgetDropzone setFiles={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize Image'/>\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )} \n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\n                {files && files.length > 0 &&                 \n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\n                <Button.Group widths={2}>\n                    <Button loading={loading} onClick={onCrop} positive icon='check'/>\n                    <Button disabled = {loading} onClick={() => setFiles([])}  icon='check'/>\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useState } from 'react'\nimport { Card, Tab, Header, Image, Grid, Button } from 'semantic-ui-react'\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\nimport { Photo, Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer( function ProfilePhotos({profile}: Props) {\n\n    const {profileStore: {isCurrentUser, uploadPhoto, uploading, setMainPhoto, loading, deletePhoto}} = useStore()\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false))\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name)\n        setMainPhoto(photo)\n    }\n\n    function handleDeletePhoto (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name)\n        deletePhoto(photo)\n    }\n\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} \n                            onClick={() => setAddPhotoMode(!addPhotoMode)}/>\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\n                    ) : (\n                        <Card.Group>\n                            {profile.photos?.map( photo => (\n                            <Card key={photo.id}>\n                                <Image src={photo.url} />\n                                {isCurrentUser && (\n                                    <Button.Group fluid widths={2}>\n                                        <Button \n                                            basic color='green' \n                                            content='Main' \n                                            name={'main' + photo.id} \n                                            disabled={photo.isMain} \n                                            loading={target === 'main' + photo.id && loading} \n                                            onClick={e => handleSetMainPhoto(photo, e)}\n                                        />\n                                        <Button \n                                            basic \n                                            color='red' \n                                            icon='trash'\n                                            loading = {target === photo.id && loading}\n                                            onClick={e => handleDeletePhoto(photo, e)}\n                                            disabled={photo.isMain}\n                                            name={photo.id}\n                                        />\n                                    </Button.Group>\n                                )}\n                            </Card>\n                            ))}\n                \n                        </Card.Group>\n                    )}\n\n                </Grid.Column>\n                \n            </Grid>\n\n            \n            \n        </Tab.Pane>\n    )\n\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <ProfileAbout />},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\n    ]\n\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        \n        /> \n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer( function ProfileHeader({profile} : Props) {\n\n    return(\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingCompoenent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username)\n        return () => {\n            setActiveTab(0)\n        }\n    }, [loadProfile, setActiveTab, username])\n\n    if (loadingProfile) return (<LoadingCompoenent content='Loading Profile...' />)\n\n    return(\n        <Grid>\n            <Grid.Column width={16}>\n                {profile && \n                <>\n                <ProfileHeader profile={profile}/>\n                <ProfileContent profile={profile}/>\n                </>\n                }\n            </Grid.Column>\n        </Grid>\n            \n    )\n})","import React from 'react'\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router'\nimport { useStore } from '../stores/store'\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore()\n\n    return (\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import { useLocation } from \"react-router\";\n\nexport default function useQuery() {\n    return new URLSearchParams(useLocation().search)\n}","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport agent from '../../app/api/agent';\nimport useQuery from '../../app/common/Util/hooks';\n\nexport default function RegisterSuccess() {\n    const email = useQuery().get('email') as string;\n\n    function handleConfirmEmailResend() {\n        agent.Account.resendEmailConfirm(email).then(() => {\n            toast.success('Verification email resent! Please check your inbox')\n        }).catch(error => console.log(error))\n    }\n\n    return (\n        <Segment placeholder textAlign='center'>\n            <Header icon color='green'>\n                <Icon name='check'/>\n                Successfully Registered!\n            </Header>\n            <p>Please check your email (including junk mail) for the verification email</p>\n            {email && \n                <>\n                    <p>Didn't receive the email? Click the below button to resend.</p>\n                    <Button primary onClick={handleConfirmEmailResend} content='Resend Email' size='huge'/>\n                </>\n            }\n        </Segment>\n    )\n}","import React from 'react'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport { toast } from 'react-toastify'\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react'\nimport agent from '../../app/api/agent'\nimport useQuery from '../../app/common/Util/hooks'\nimport { useStore } from '../../app/stores/store'\nimport LoginForm from './LoginForm'\n\nexport default function ConfirmEmail() {\n\n    const {modalStore} = useStore()\n    const email = useQuery().get('email') as string\n    const token = useQuery().get('token') as string\n\n    const Status = {\n        Verifying: 'Verifying',\n        Failed: 'Failed',\n        Success: 'Success'\n    }\n\n    const [status, setStatus] = useState(Status.Verifying);\n\n    function handleConfirmEmailResend() {\n        agent.Account.resendEmailConfirm(email).then(() => {\n            toast.success('Verification email resent! Please check your inbox')\n        }).catch(error => console.log(error))\n    }\n\n    useEffect(() => {\n        agent.Account.verifyEmail(token,email).then(() => {\n            setStatus(Status.Success)\n        }).catch(() => {\n            setStatus(Status.Failed)\n        })\n    }, [Status.Failed, Status.Success, email, token])\n\n    function getBody() {\n        switch (status) {\n            case Status.Verifying:\n                return<p>Verifying...</p>;\n            case Status.Success:\n                return (\n                    <div>\n                        <p>Email confirmed! You can now log in.</p>\n                        <Button primary onClick={() => modalStore.openModal(<LoginForm />)}  size='huge' content='Log in here!'/>\n                    </div>\n                );\n            case Status.Failed:\n                return (\n                    <div>\n                        <p>Verification failed. You can try resending the verification link to your email.</p>\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend email' />\n                    </div>\n                );   \n\n        }\n    }\n\n    return (\n        <Segment placeholder textAlign='center'>\n            <Header>\n                <Icon name='envelope'/>\n            </Header>\n            <Segment.Inline>\n                {getBody()}\n            </Segment.Inline>\n        </Segment>\n    )\n\n}","import React from 'react';\nimport { Container } from 'semantic-ui-react';\n\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\n\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\n\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport LoginForm from '../../features/users/LoginForm';\nimport {useStore} from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport TestErrors from '../../features/errors/TestError';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\n\n\nfunction App() {\n\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded())\n      commonStore.setAppLoaded()\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n \n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n        path={'/(.+)'}\n        render={() => (\n          <>\n        <NavBar />\n        <Container style={{marginTop: '7em'}}>\n          <Switch>\n            <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n            <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n            <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n            <Route path='/login' component={LoginForm} />\n            <PrivateRoute path='/profiles/:username'component={ProfilePage}/>\n            <Route path='/errors' component={TestErrors}/>\n            <Route path='/server-error' component={ServerError} />\n            <Route path='/account/registerSuccess' component={RegisterSuccess} />\n            <Route path='/account/verifyEmail' component={ConfirmEmail} />\n            <Route component={NotFound} />\n          </Switch>\n        </Container>\n          </>\n        )} />\n\n        \n    </>\n  );\n}\n\nexport default observer(App)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect} from 'react'\nimport {useLocation} from 'react-router-dom'\n\nexport default function ScrollToTop() {\n    const {pathname} = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0,0)\n    }, [pathname])\n\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/layout/App';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport  './app/layout/styles.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}